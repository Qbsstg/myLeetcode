package method;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Solution6121 {

    private static String[] result = {
            "336709321689661205296248448219048675861146825288084971144172008305839385174059050461820417876", "965294493881378874751402963869217931123693342174823715544397840589618408677747767329313434969", "376640528871229906851586476778057146152139036921895433259522411286108734265922668201009644494", "707349223061859634602325091474248137460944911794023907115196440442602977183886584791703381114", "220611269152603675303465967983918438734298124193147800966184586195758322731690338171826137693", "096160077795353269506333151936144256024621446859461767898168402734364013578014358573866839171", "732036636590588338052998706769744870760256789864999577241988468180056905430819912847678054376", "879346588154387798919686377303618236421803867795912306180813793337205506762660472836502324829", "417237156356756719916621630061529987569642703333398872861703058558757773428997020044930691149", "521113936496436952167922215215206268630406149005365513585135628912999665673536029339248743777", "184445967509824021786448283373409850809113228189456963733637513848775755762959591133072045529", "785907334282666008054159804442031522415920820699046259787744444380169812222957779663118471746", "577618809944588099739723694869343746637443389794292893476088919682894157883189567451027845790", "969358657583284051113799469076346795742620148912409211586362076934791403169700461623573596440", "190913020053586063798073505764367935140704476549407719816617302364910914333607880493454691351", "945526755657539695455940017385613185134034959528157840514594826603183359962619183282405911133", "158313737414890327528988604538523464116203465271015993652655263725279707839349306139058797433", "035255639669706848058425264870814584066735607022608964431226044824830858324500897509698871342", "614982396773129154620795562571664088181345399865379833983842585526212466460231401288228705928", "847271282482521960074884269676051705886921228272405059999378847835835871308021402886345929482", "728447845586564740772758790492967230934208915163998049727629376508041905431009024468596610880", "964310412897102909782289765123685482366501106353083503981398346570207099384111510345900497829", "110687438633403023663227955969925019950235692510654818345648228069388211641411374528424429327", "780207954416922628024902680273288961468088245616467060098889887452203826402089368009178139338", "285158391774682407271916073314309781424601317284899968149754276112425824262569810986630481936", "496926288587182220342615226865238689918984960298418483363802793055999157058938629932290379144", "605467107057990688615692766131378686539830080162494835495891821289557024463364078475512461941", "509781276747447413322267773388418685210526848655213955105465980256071311104903861326385025965", "919317205402987309667022743475110240491913252290170832538141005995100911340646981319051011479", "267335134544320099745961091351435807177638117835210167624073786516471588252254320002595394142", "392607174545128631673538196143124215398608107210462424397790590932988519362769739983871895743", "147890682606472315278119259030496566621955384566411377926630949637302764058448277295465539597", "511348236681971011793995561730738946133094497334274741250170484064531563510604297652633236143", "996988388177566423786752118921329133115239896253065071492537297463863587498608928493563379397", "419333208881289018238724575688892339244300904928351206897808603532595219899072469844589196969", "959976472977059370125143747698615110535642309587919457686623899700686749276184506603017833319", "865341433952655416267808207352529160484475715601631371204920447684541582776309823079699591472", "742098206539638791162778967461804895917481363842851075943010389297304079624690903215783299864", "916561201863258939210736116550325839037396493885429629656640096652152725254131848943586852656", "083565804097314693916895063482554295702585391409290384151631833698376051383328986654656757334", "412895323700806432206401231995765126877846669938592001580682956400798411332695071374895383599", "829473497117872652485160443772851033407875079409381073791211706834230774418864816889874234092", "478131511698790299980935599207664054447185737952735040931278885005773280411629679390076898491", "581377023301901072001093183776964101172688943150169649824835211104760506083548565469988504451", "064414098980067060303135234405512511228871870888403091686288904105020879745699525173804327155", "226436174145679052054224643499738404813197465827221821667995189424106456518972790693918002709", "629648526351062744398288692983567132778359382141418614841968163379826566950110792185046841559", "994919778532640003761235314977423847551072509310394230033615610816140290186719674898522549958", "180689149413753933326531666800617733009691934685750263877370522601403386091511503432763109898", "038186743255422977649230450600841977777505308389294110449029305305868380106904655147056731956", "731160130951583831523299737257543642717898247810813462252970622278050126469284940255982390309", "160569685366515204266249852704433265924960161501882648194430597335262338853878998208065642885", "062333884281104603794885386271817009782914500279699329204567165545598452391278879392981360653", "126892955702595344160287999763316302062753474081629207394735754147611432545499808687068713575", "597726090775716427492185340311825198255641372318856747391153660304401927476625214513220256954", "427986626329628573635659479946651136916658759548114295966013723789156445861096959219558521057", "315198533661972482439007311344451455989719046329312379584456978071479447594260531225629962922", "353968529529531973952022721554882269120811008420746185827491701502353343598057232599767473788", "704495166515254657869858855376026340509365783062155469936863439755129109112911659069960031026", "698743767603275545598293302294108036885802620092452998914598876970142229585324207704512116257", "617901803720967986210926930073061251573941511163209169570999607400693904306347304601636350263", "024619472930542635412894476073349945316821051276962920032243926547081190114052399471252788013", "571518509031340675022671504271403267991877424500213156871817182999527675689761643171162499224", "196240840038418840119373233501994540075642923515152423635321286993315355234043085998119639775", "687374577923472595598049149284868225916485493083767999775970966503645623141849581200057467762", "969154349916428357846141875156656417613411042837678112325199539806411828241469507041837425175", "578916844894247741487670578754728777102935770447709853903099564409129756925595587079765636990", "078154444207498996197869219658606248252543426938752634721225276586135352511493097769053214263", "571368026568405828816751082782662367396772766058000375650436208338016584681239279786691425325", "137844369867057149579753810808353690809604402112977175510913477140379940365336030311749966312", "139757748368882171276525193860780010922465514091895556272037075244134080505071838106034375839", "860000385209286685791458360628850162127942538256101239798710295280693466306135787499097119603", "028480615885384391092258563266786458079291571679527494923790641589278662186599691015919276651", "506592999730611947555171576227328399844252469205913410585510287685114089950092410464799497631", "644924565809229700280459285911502133866679686683760293189762927921737527539528186013444208274", "033856874215331982903618986979376922371186767225901429979327146682064191606144983672183239742", "631538541843183512745119577178926689545898844486083524265047818276388404725689538445242180398", "970061533821658469618808930884020998238866223260776375960609609910417836094932780923012862259", "006290744052782996744490377046363146164427743827229618910425009147240008553816522627629151658", "015966206758668033968876470776109054732343246047452422070949552068244252542554326425076940802", "854373677662798380054459262549710678161015402934452183266577457925126280397740743021568475536", "574013803748659822398437984177955255374431640029075201623934026462639873247275054780008136373", "377509663961783217324817674882964098599364027124872889405308560567637469545650829922845843163", "572365000521666755454768988813555387083248169293654789808664560338510521836048046133323561472", "271324339112113566609060289794979625156002674128696683847211452059363846545074552742646590619", "847793902940090129475380993804717463460135286768696704534255966974174313411297884090625648608", "911023288430281199107243510258174304939169735900338193397657800859051568017944289487753620848", "831022458485765452647150883750084264219274988210428278163397526431431456493005486732237887602", "821463094017036609749823201476702974935510987682787931256978677483852416661372100124772620968", "247318297883509423470531373331175259854606258608062235281282354132450962710467074252530232094", "344601135003033793099819527802959380937346938029601638400307407762479513378315982784789261490", "601852442125166246797975194519165048874814355317697955049810534446215841253542051866666110951", "911473232415361653493668580566214517239157957997288488846479729783999220227556566328905732996"};

    private static int[][] queries = {{87, 64}, {88, 73}, {30, 15}, {19, 42}, {27, 64}, {39, 14}, {40,
            84}, {29
            , 82}, {87, 11}, {72, 8}, {7, 83}, {39, 52}, {72, 13}, {50, 57}, {31, 88}, {58, 53}, {62, 66}, {18, 87}, {12, 86}, {11, 9}, {47, 33}, {17, 75}, {63, 83}, {40, 17}, {3, 30}, {31, 92}, {22, 63}, {19, 87}, {46, 2}, {34, 82}, {10, 68}, {3, 52}, {24, 16}, {25, 60}, {89, 43}, {65, 70}, {72, 44}, {2, 89}, {46, 55}, {76, 81}, {93, 90}, {50, 71}, {10, 32}, {52, 29}, {67, 62}, {20, 31}, {88, 52}, {28, 10}, {79, 60}, {65, 83}, {23, 60}, {70, 78}, {20, 31}, {56, 92}, {1, 12}, {52, 78}, {1, 82}, {85, 29}, {82, 41}, {32, 23}, {62, 17}, {29, 55}, {80, 41}, {46, 59}, {60, 19}, {39, 22}, {34, 91}, {31, 90}, {4, 55}, {35, 58}, {39, 2}, {48, 35}, {27, 72}, {84, 70}, {66, 17}, {51, 69}, {31, 88}, {72, 31}, {48, 5}, {14, 71}, {47, 8}, {3, 62}, {61, 9}, {28, 59}, {81, 49}, {80, 11}, {24, 48}, {44, 63}, {8, 48}, {79, 29}, {12, 46}, {88, 17}, {64, 68}, {34, 80}, {60, 18}};

    private static String[] result1 = {"64333639502", "65953866768", "17845691654", "87148775908",
            "58954177897", "70439926174", "48059986638", "47548857440", "18418180516", "06364956881",
            "01866627626", "36824890579", "14672385151", "71207752868"};

    private static int[][] queries1 = {{9, 4}, {6, 1}, {3, 8}, {12, 9}, {11, 4}, {4, 9}, {2, 7}, {10, 3}, {13, 1},
            {13, 1}, {6, 1}, {5, 10}};

    public static void main(String[] args) {
        //String[] nums = {"102", "473", "251", "814"};
        //int[][] queries = {{1, 1}, {2, 3}, {4, 2}, {1, 2}};

        //String[] nums = {"24", "37", "96", "04"};


        System.out.println(Arrays.toString(smallestTrimmedNumbers(result1, queries1)));
        //System.out.println(Integer.valueOf("5953866768"));
    }


    public static int[] smallestTrimmedNumbers(String[] nums, int[][] queries) {

        int[] result = new int[queries.length];
        int length = nums[0].length();
        Map<Integer, List<String[]>> map = new HashMap<>();

        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            String[][] ans = new String[nums.length][length];

            List<String[]> collect;
            if (map.containsKey(query[1])) {
                collect = map.get(query[1]);
            } else {
                for (int j = 0; j < nums.length; j++) {
                    ans[j] = new String[]{nums[j].substring(length - query[1]), String.valueOf(j)};
                }
                collect = Arrays.stream(ans).sorted((o1, o2) -> {
                    if (o1[0].equals(o2[0])) {
                        return Integer.compare(Integer.parseInt(o1[1]), Integer.parseInt(o2[1]));
                    } else {
                        return o1[0].compareTo(o2[0]);
                    }
                }).collect(Collectors.toList());
                map.put(query[1], collect);
            }
            result[i] = Integer.parseInt(collect.get(query[0] - 1)[1]);
        }
        return result;
    }
}
